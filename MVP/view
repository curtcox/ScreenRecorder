#!/usr/bin/env groovy
import groovy.io.FileType
import java.awt.*
import java.awt.event.*
import java.awt.image.*
import javax.swing.*
import javax.imageio.*
import java.util.List

String home() { System.properties['user.home'] }
String recordings() { home() +'/recordings' }

List<File> existingImages() {
    def list = []
    def dir = new File(recordings())
    dir.eachFileRecurse (FileType.FILES) { file ->
        String name = file.name
        if (name.endsWith('.png') && !name.startsWith("Screen Shot")) {
            list << file
        }
    }
    list
}

class Viewer extends JFrame {
    int x = 0
    int y = 0
    List<File> files
    private BufferedImage image

    Viewer(List<File> files) {
        this.files = files
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
        setSize(500,500)
    }

    void up() {
        if (y>0) y = y - 1
    }

    void down() {
        if (y<files.size()-1) y = y + 1
    }

    void left() {
        if (x>0) x = x - 1
    }

    void right() {
        x = x + 1
    }

    void addKeyListener() {
        addKeyListener(new KeyAdapter() {
            @Override void keyPressed(KeyEvent e) {
                int code = e.keyCode
                if (code==KeyEvent.VK_UP)       up()
                if (code==KeyEvent.VK_DOWN)   down()
                if (code==KeyEvent.VK_LEFT)   left()
                if (code==KeyEvent.VK_RIGHT) right()
                File file = files.get(y)
                println "($x , $y) $file"
                image = ImageIO.read(file)
                repaint()
            }
        })
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g)
        paintImage((Graphics2D) g)
    }

    private void paintImage(Graphics2D g) {
        if (image!=null) {
            g.drawImage(image,0,0,getWidth(),getHeight(),null)
        }
    }
}

if (args.length == 0) {
    Viewer viewer = new Viewer(existingImages())
    viewer.addKeyListener()
    viewer.setVisible(true)
} else {
    existingImages().forEach(f -> println f)
}
println 'done'
