#!/usr/bin/env groovy
import java.util.function.Consumer
import java.util.regex.*
import groovy.transform.*

@ToString
class T { // T as in Time, because an instance corresponds to different aspects of a single time.

    File source
    String name

    T(File source) {
        this.source = source
        this.name = source.name
    }

    void exec(String command,String arg) {
        Process proc = new ProcessBuilder(command,source.toString(),arg).start()
        def outputStream = new StringBuffer()
        proc.waitForProcessOutput(outputStream, System.err)
        println outputStream
    }

    static String home() { System.properties['user.home'] }
    static String recordings() { home() +'/recordings' }
    boolean isScreenShot() {  name.startsWith("Screen Shot") && name.endsWith("png")  }
    void ensureDirectoryExists() { new File(destDir()).mkdirs() }
    String date() { name.substring(12,22) }
    String time() { name.split(' at ')[1].split('M')[0] }
    String destDir() {
        String[] d = date().split("-")
        String[] t = time().split(Pattern.quote("."))
        recordings() + '/' + d[0] + '/' + d[1] + '/' + d[2] + '/' + t[0].trim()
    }
    String timeString() {
        name.substring(12,name.length()-4)
                .replace(' ','_')
                .replace('_at_','_')
                .replace('(','')
                .replace(')','')
    }
    String textFile()   { outputbase() + '.txt' }
    String wordsFile()  { outputbase() + '.words' }
    String outputbase() { destDir() + '/' + timeString() }
    File hourDir()      { new File(destDir()) }
    File dayDir()       { hourDir().parentFile }
    File monthDir()     { dayDir().parentFile  }
    File yearDir()      { monthDir().parentFile }

    void ocr()  { exec("tesseract",outputbase()) }
    void move() { exec("mv",outputbase(name + '.png')) }
    static Set<String> wordsIn(File file) { new TreeSet(Arrays.asList(file.text.split("[\\p{Punct}\\s]+"))) }
    static void writeTo(Set<String> words,File outFile) {
        outFile.withWriter{ out ->
            words.each {out.println it}
        }
    }
    void index() { writeTo(wordsIn(new File(textFile())),new File(wordsFile())) }
}

class Changes {
    List<T> ts
    Changes(List<T> ts) { this.ts = ts }

    void ocr()        { ts.forEach(t -> t.ocr()) }
    void indexFiles() { ts.forEach(t -> t.index()) }

    Set<File> hours() {
        Set<File> all = new HashSet<>()
        ts.forEach(t -> all.add(t.hourDir()))
        all
    }

    List<File> indicesIn(File dir) {
        List<File> out = new ArrayList<>()
        Arrays.asList(dir.listFiles()).forEach(f -> {
            if (f.name.endsWith('.words')) {
                out.add(f)
            }
        })
        out
    }

    List<File> childIndices(File dir) {
        List<File> out = new ArrayList<>()
        Arrays.asList(dir.listFiles()).forEach(d -> {
            if (d.isDirectory()) {
                File words = new File(d.toString() + '/words')
                if (words.exists()) {
                    out.add(words)
                }
            }
        })
        out
    }

    void generateIndex(File dir) { generateIndex(dir,childIndices(dir)) }
    void generateIndex(File dir,List<File> files) {
        Set<String> words = new TreeSet<>()
        files.forEach(f -> words.addAll(T.wordsIn(f)))
        T.writeTo(words,new File(dir.toString() + '/words'))
    }

    void indexHours()  { hours().forEach(f -> generateIndex(f,indicesIn(f))) }
    void indexAll()    { generateIndex(new File(T.recordings())) }

    Set<File> index(java.util.function.Function<T,File> f) {
        Set<File> files = new HashSet<>()
        ts.forEach(t -> files.add(f.apply(t)))
        files.forEach(file -> generateIndex(file))
    }

    void index() {
        indexFiles()
        indexHours()
        index(t -> t.dayDir())
        index(t -> t.monthDir())
        index(t -> t.yearDir())
        indexAll()
    }

    void move() {
        for (t in ts) {
            t.move()
        }
    }

    void process() {
        ocr()
        index()
        //move()
    }
}

String home() { System.properties['user.home'] }
String recordings() { home() +'/recordings' }

List<T> changes() {
    List<T> changed = new ArrayList<>();
    for (file in new File(recordings()).listFiles()) {
        T t = new T(file)
        if (t.isScreenShot()) {
            changed.add(t)
            t.ensureDirectoryExists()
        }
    }
    changed
}

def go() {
    new Changes(changes()).process()
}

def test() {
    List<T> ts = changes()
    println ts
    T t = ts[0]
    println "t = $t"
    println "source     = $t.source"
    println "name       = $t.name"
    println "date       = ${t.date()}"
    println "time       = ${t.time()}"
    println "destDir    = ${t.destDir()}"
    println "textFile   = ${t.textFile()}"
    println "wordsFile  = ${t.wordsFile()}"
    println "outputbase = ${t.outputbase()}"
}

test()
go()